from keras.utils import np_utils
from keras.models import Sequential
from keras.layers import Dense, Conv2D, AveragePooling2D, Flatten

import os
import numpy as np


TRAIN_BENIGNWARE_PATH = 'E:/머신러닝/toy_train_fixed_benign'
TRAIN_MALWARE_PATH = 'E:/머신러닝/toy_train_fixed_mal'
TEST_BENIGNWARE_PATH = 'E:/머신러닝/toy_test_fixed_benign'
TEST_MALWARE_PATH = 'E:/머신러닝/toy_test_fixed_mal'

x_train = []
y_train = []
x_test = []
y_test = []

train_benignware_list = os.listdir(TRAIN_BENIGNWARE_PATH)
train_malware_list = os.listdir(TRAIN_MALWARE_PATH)
test_benignware_list = os.listdir(TEST_BENIGNWARE_PATH)
test_malware_list = os.listdir(TEST_MALWARE_PATH)

for benignware in train_benignware_list:
    data = open(os.path.join(TRAIN_BENIGNWARE_PATH, benignware), 'rb').read()
    tmp = [ data[i] for i in range(len(data))]
    x_train.append(tmp)
    y_train.append(0)
print('load train_benignware complete')


for malware in train_malware_list:
    data = open(os.path.join(TRAIN_MALWARE_PATH, malware), 'rb').read()
    tmp = [ data[i] for i in range(len(data))]
    x_train.append(tmp)
    y_train.append(1)
print('load train_malware complete')

for benignware in test_benignware_list:
    data = open(os.path.join(TEST_BENIGNWARE_PATH, benignware), 'rb').read()
    tmp = [data[i] for i in range(len(data))]
    x_test.append(tmp)
    y_test.append(0)
print('load test_benignware complete')

for malware in test_malware_list:
    data = open(os.path.join(TEST_MALWARE_PATH, malware), 'rb').read()
    tmp = [data[i] for i in range(len(data))]
    x_test.append(tmp)
    y_test.append(1)
print('load test_malware complete')

x_train = np.array(x_train)
y_train = np.array(y_train)
x_test = np.array(x_test)
y_test = np.array(y_test)

x_train = x_train.reshape(x_train.shape[0],32,32,1).astype('float32') / 255
y_train = np_utils.to_categorical(y_train, 2)

x_test = x_test.reshape(x_test.shape[0],32,32,1).astype('float32') / 255
y_test = np_utils.to_categorical(y_test, 2)

model = Sequential()
model.add(Conv2D(32, kernel_size=(2, 2), input_shape=(32, 32, 1), activation='relu'))
model.add(AveragePooling2D(pool_size=2))
model.add(Conv2D(64, (2, 2), activation='relu'))
model.add(AveragePooling2D(pool_size=2))
model.add(Conv2D(128, (2, 2), activation='relu'))
model.add(AveragePooling2D(pool_size=2))
model.add(Conv2D(64, (2, 2), activation='relu'))
model.add(AveragePooling2D(pool_size=2))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(2, activation='softmax'))

model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

history = model.fit(x_train, y_train,
                    epochs=10, batch_size=16, verbose=0
                    )

print('accuracy :', model.evaluate(x_test, y_test, verbose=0)[1])
model.summary()
